#!/bin/bash
##############################################################
#
# Elasticsearch para Openshift
#
##############################################################

# Variables

ARG1=$1
ARG2=$2
ARG3=$3
es_ns="openshift-logging"
es_pod=$(oc get po -l component=elasticsearch -n $es_ns --no-headers -o jsonpath='{range .items[?(@.status.phase=="Running")]}{.metadata.name}{"\n"}{end}' | head -n1)


# Functions

get_help() { 

    echo "---------------------------------------------------------------------------------------"
    echo "ElasticSearch Command Help for Openshift Cluster"
    echo "---------------------------------------------------------------------------------------"
    echo "Params:"
    echo "         escli.sh <subcommand> <argument1> <argument2>"
    echo ""
    echo "Sub Commands:"
    echo ""
    echo "         help"
    echo "         info"
    echo "         health"
    echo "         indices"
    echo "         deleteindice <indice>"
    echo "         shards"
    echo "         shardsunassigned"
    echo "         start"
    echo "         stop"
    echo "         tasks"
    echo "         threadpools"
    echo "         api <string>"
    echo "         diskspace"
    echo ""
    echo "For more informacion RH KB:"
    echo ""
    echo "- Troubleshooting ES on Openshift: "
    echo "  	https://access.redhat.com/articles/3136551"
    echo ""
    echo "- Need to manually rebalance or reallocate primary shards on Elasticsearch nodes"
    echo "	https://access.redhat.com/solutions/4079301"
    echo ""
    echo "---------------------------------------------------------------------------------------"
    echo "Gonzalo Acosta <gonzaloacostapeiro@gmail.com>"
    echo "---------------------------------------------------------------------------------------"
}


get_info() {

    echo "---------------------------------------------------------------------------------------"
    echo "ElasticSearch Command Help for Openshift Cluster"
    echo "---------------------------------------------------------------------------------------"
    echo ""
    echo "Indices"
    echo "-------"
    echo ""
    echo "- RED state means that at least one index is in RED state (it's primary shard has not" 
    echo "  been recovered) or that the minimum amount of Elasticsearch nodes has not reached "
    echo "  (i.e. CUORUM). Writes are not allowed, cluster is not accessible."
    echo ""
    echo "- YELLOW state means that all indices are at least in this same state, which means "
    echo "  that at least one replica shard is not assigned/recovered."
    echo ""
    echo "- GREEN: All ES nodes are running and all indices are fully recovered."
    echo ""
    echo "  The health query will show things like the pending tasks in case it is recovering, the "
    echo "  number of shards, the percent of active shards and the unassigned shards."
    echo ""
    echo "Indice Standard Name"
    echo "--------------------"
    echo ""
    echo "Indices. By default the indices API query will show the health, status, documents and"
    echo "size data about each index. It is useful to know what to expect here. Some relevant index"
    echo "names are:"
    echo ""
    echo "- .kibana - Contains user information like predefined searches, dashboards and other settings"
    echo ""
    echo "- .searchguard.<pod_name> - Contains security information regarding SearchGuard initialization."
    echo "  It MUST contain 5 documents"
    echo ""
    echo "- .operations.YYYY.MM.DD - Logs coming from operations projects like default. This will only "
    echo "  appear on logging-ops cluster if it exists"
    echo ""
    echo "  project.<project_name>.<uuid>.YYYY.MM.DD - Project related index created by day containing"
    echo "  all logs related to that project for that day"
    echo "" 
    echo "Nodes Status"
    echo "------------"
    echo ""
    echo "Will show basic information about all the nodes forming the cluster, who is the master"
    echo "(marked with *), their name and also the percent of RAM used out of the total available"
    echo "along with the HEAP percent used out of the total RAM used. Dont get confused when you "
    echo "see high values of RAM percent because this is the maximum available to be used by the HEAP."
    echo "An indicator of being low in memory is having a high HEAP percent close to the ram.percent "
    echo "which will require allocating more RAM"
    echo ""
    echo "For more informacion RH KB:"
    echo "- Troubleshooting ES on Openshift: "
    echo "  	https://access.redhat.com/articles/3136551"
    echo "- Need to manually rebalance or reallocate primary shards on Elasticsearch nodes"
    echo "	https://access.redhat.com/solutions/4079301"
    echo "" 
    echo "---------------------------------------------------------------------------------------"
    echo "Gonzalo Acosta <gonzaloacostapeiro@gmail.com>"
    echo "---------------------------------------------------------------------------------------"
}


# Main

if [[ $ARG1 == "api" ]] ; then
    
    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/${ARG2}

elif [[ $ARG1 == "stop" ]] ;  then

    # Patch operator from Managed to Unmanaged
    oc patch clusterlogging  instance --type=merge --patch='{"spec":{"managementState":"Unmanaged"}}'

    # Scale down to 0 all the DCs
    for deployment in $(oc get deployment -o=name -l component=elasticsearch -n $es_ns); do oc scale $deployment --replicas=0 -n $es_ns; done

    # Confirm all logging-es pods are terminated
    oc get po --selector=component=es -n openshift-logging

elif [[ $ARG1 == "start " ]] ; then

    for deployment in $(oc get deployment -o=name -l component=elasticsearch -n $es_ns); do oc scale $deployment --replicas=1 -n $es_ns; done

    #oc patch clusterlogging  instance --type=merge --patch='{"spec":{"managementState":"Managed"}}'

    oc get po --selector=component=es -n openshift-logging

elif [[ $ARG1 == "indices" ]] ; then

    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cat/indices?v

elif [[ $ARG1 == "shards" ]] ; then

    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cat/shards?v

elif [[ $ARG1 == "shardsunassigned" ]] ; then
    
    oc exec $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cat/shards?h=index,shard,prirep,state,unassigned.reason,node | grep UNASSIGNED

elif [[ $ARG1 == "imageversion" ]] ; then

    oc get po -n $es_ns -o 'go-template={{range $pod := .items}}{{if eq $pod.status.phase "Running"}}{{range $container := $pod.spec.containers}}oc exec -n openshift-logging -c {{$container.name}} {{$pod.metadata.name}} -- find /root/buildinfo 
-name Dockerfile-openshift* | grep -o logging.* {{"\n"}}{{end}}{{end}}{{end}}' | bash -

elif [[ $ARG1 == "deleteindice" ]] ; then

    echo -n "Proceed to delete indice: $ARG2? [y/n]: "
    
    read ans

    if [[ $ans == "y" || $ans == "yes" ]]; then
        
        oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca -XDELETE https://localhost:9200/$ARG2

    else

        echo "Do not delete any indice with name: $ARG2"

    fi

elif [[ $ARG1 == "diskspace" ]] ; then

    for i in $(oc get po -l component=elasticsearch -n openshift-logging --no-headers -o jsonpath='{range .items[?(@.status.phase=="Running")]}{.metadata.name}{"\n"}{end}') ; do oc exec -c elasticsearch -n openshift-logging $i -- df -h /elasticsearch/persistent ; done


elif [[ $ARG1 == "health" ]] ; then

    echo "------------------------------------------------------------------------------"
    echo "Elasticseach Health Report"
    echo "------------------------------------------------------------------------------"

    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cat/health?v

    echo "------------------------------------------------------------------------------"
    echo "Nodes"
    echo "------------------------------------------------------------------------------"

    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cat/nodes?v
    
    echo "------------------------------------------------------------------------------"
    echo "Master"
    echo "------------------------------------------------------------------------------"

    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cat/master?v    

elif [[ $ARG1 == "tasks" ]] ; then

    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cluster/pending_tasks?v

elif [[ $ARG1 == "threadpool" ]] ; then

    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca https://localhost:9200/_cluster/thread_pool?v

#elif [[ $ARG1 == "replicas" ]] ; then
#    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca -XPUT https://localhost:9200/$ARG3/_settings -d '{ "index" : { "number_of_replicas" : 2 } }'
#    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca -XPUT https://localhost:9200/$ARG3/_settings -d "'"{ "index" : { "number_of_replicas" : $ARG2 } }"'"
#    oc exec -n $es_ns $es_pod -c elasticsearch -- curl -s --key /etc/elasticsearch/secret/admin-key --cert /etc/elasticsearch/secret/admin-cert --cacert /etc/elasticsearch/secret/admin-ca -XPUT https://localhost:9200/*/_settings -d '{ "index" : { "number_of_replicas" : 2 } }

elif [[ $ARG1 == "deletestack" ]] ; then

    echo -n "Proceed to delete ALL the Cluster Logging Stack? [y/n]: "
    read ans

    if [[ $ans == "y" || $ans == "yes" ]]; then

        echo -n "PLEASE CONFIRM AGAIN BECAUSE ALL THE STACK WILL BE DELETED!! [y/n]: "
        read confim

        if [[ $confim == "y" || $confim == "yes" ]]; then

            echo "OK, ALL THE STACK WILL BE DELETED!"
            oc delete clusterlogging instance -n openshift-logging
            sleep 2
            echo -n "Do you need deleted the data into pvc? [y/n]"
            read check_pvc

            if [[ $check_pvc == "y" || $check_pvc == "yes" ]] ; then

                oc delete pvc --all -n openshift-logging

            else

                echo "The PVC do not DELETED, your information is SAFE!!"

            fi

        else

            echo "Your Cluster Logging is SAFE!!"

        fi

    else

        echo "Your Cluster Logging is SAFE!!"

    fi

elif [[ $ARG1 == "info" ]] ; then

    get_info

elif [[ $ARG1 == "help" ]] ; then

    get_help

else 

    get_help

fi

